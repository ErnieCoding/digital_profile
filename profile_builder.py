# profile_builder.py
import os
from datetime import datetime
from ollama_client import ollama_generate
from config import OLLAMA_MODEL_GEN
from typing import List, Dict
from docx import Document

FIRST_PROMPT = (
"Ты - передовая лингвистическая модель, способная «перевоплощаться в заданного человека», предсказывая максимально точно его возможные ответы на конкретные вопросы или поведение в заданной ситуации.\n"
"Для этого ты собираешь предварительную информацию о заданном человеке, анализируя транскрипт записей его встреч и формируешь полный профиль человека, который можно использовать в дальнейшем в промптах для предсказания его ответов и реакций.\n"
"Твоя цель - создать базовый цифровой профиль сотрудника, указанного в приложении 1.\n"
"Действуй по шагам. \n"
"Внимательно изучи транскрипт записи встречи с участием указанного сотрудника. \n"
"Определи и сформулируй категории, которые должны быть в его базовом цифровом профиле, чтобы дать наиболее точную и всестороннюю оценку качеств сотрудника, которые могут влиять на эффективность его работы. \n"
"Категорий должно быть не более 5 штук.\n"
"Каждую категорию дополни критериями, которые должны быть в его базовом цифровом профиле. Критериев должно быть от 3 до 5 штук. Критерии могут характеризовать сотрудника как с положительной, так и отрицательной точки зрения. Отдельно акцентируйся на отрицательных качествах, так как они в наибольшей степени могут быть использованы для повышения эффективности сотрудника. \n"
"Обращай внимание на коммуникативные навыки, лексику, речевые обороты, эмоциональные реакции, психологические особенности, наличие эмпатии по отношению к кандидату, умение задавать открытые вопросы, способность докопаться до сути, выявлять мотивацию кандидатов и соответствие их навыков требованиям вакансии. \n"
"Максимально подробно опиши человека в этом цифровом профиле. Cделай акцент (максимально подробно опиши) софт скилы, важные для работы в команде и достижения (коммуникативные навыки, взаимодействие с коллегами, целеустремленность, нацеленность на результат, эмпатия, неконфликтность, инициативность, ответственность), если найдешь еще важные или необходимые качества, то обязательно добавь и их описание. Для этого можешь расширить количетсво категорий. Но учти, что ответ должен влезть в консоль вывода.\n"
"Максимально подробно опиши профессиональные качества человека, его знания в технической часте (стек технологий, которым он владеет и в какой степени).\n"
"Не будь очень добр. Оценивай максимально строго. Это необходимо для того, чтобы сотрудник узнал свои минусы и мог их исправить в будущем. Поэтому оценивай максимально строго, подмечай даже малейшие негативные проявления.\n"
"Если говоришь о негативном качестве, то явно указывай насколько сильно оно проявляется у сотрудника. (по шкале от проявляется редко - проявляется заметно) Только для негативных качеств.\n"
"Перепроверь ответ.\n"
"Приложение 1. Анализируемый сотрудник – {name}"
)

SECOND_PROMPT = (
"Ты - передовая лингвистическая модель, способная «перевоплощаться в заданного человека», предсказывая максимально точно его возможные ответы на конкретные вопросы или поведение в заданной ситуации. \n"
"Для этого ты собираешь предварительную информацию о заданном человеке, анализируя транскрипт записей его встреч и формируешь полный профиль человека. \n"
"Твоя цель - уточнить и дополнить существующий базовый цифровой профиль сотрудника, указанного в приложении 1. \n"
"Действуй по шагам. \n"
"Внимательно изучи транскрипт записи встречи с участием указанного сотрудника. \n"
"Определи и сформулируй категории, которые должны быть добавлены к его базовому цифровому профилю, чтобы дать наиболее точную и всестороннюю оценку качеств сотрудника, которые могут влиять на эффективность его работы. \n"
"Каждую категорию дополни новыми критериями или уточни существующие критерии, которые есть в его базовом цифровом профиле. Критериев должно быть от 5 до 7 штук. Критерии могут характеризовать сотрудника как с положительной, так и отрицательной точки зрения. \n"
"Отдельно акцентируйся на отрицательных качествах, так как они в наибольшей степени могут быть использованы для повышения эффективности сотрудника. \n"
"Обращай внимание на коммуникативные навыки, лексику, речевые обороты, эмоциональные реакции, психологические особенности, наличие эмпатии по отношению к кандидату, умение задавать открытые вопросы, способность докопаться до сути, выявлять мотивацию кандидатов и соответствие их навыков требованиям вакансии. Учитывай контекстную информацию, указанную в Приложении 2.\n"
"Максимально подробно опиши человека в этом цифровом профиле. Cделай акцент (максимально подробно опиши) софт скилы, важные для работы в команде и достижения (коммуникативные навыки, взаимодействие с коллегами, целеустремленность, нацеленность на результат, эмпатия, неконфликтность, инициативность, ответственность), если найдешь еще важные или необходимые качества, то обязательно добавь и их описание. Для этого можешь расширить количетсво категорий. Но учти, что ответ должен влезть в консоль вывода.\n"
"Максимально подробно опиши профессиональные качества человека, его знания в технической часте (стек технологий, которым он владеет и в какой степени).\n"
"Не будь очень добр. Оценивай максимально строго. Это необходимо для того, чтобы сотрудник узнал свои минусы и мог их исправить в будущем. Поэтому оценивай максимально строго, подмечай даже малейшие негативные проявления.\n"
"Если говоришь о негативном качестве, то явно указывай насколько сильно оно проявляется у сотрудника. (по шкале от проявляется редко - проявляется заметно)Только для негативных качеств.\n"
"Перепроверь ответ.\n"
"Приложение 1. Базовый цифровой профиль: \n{last_result}\n"
"Приложение 2. Анализируемый сотрудник – {name}"
)

class ProfileBuilder:
    def __init__(self, pipeline):
        """
        pipeline: экземпляр Pipeline (чтобы использовать pipeline.kag и логику сохранения)
        """
        self.pipeline = pipeline
        self.kag = pipeline.kag

    def build_profile(self, name: str, meetings: List[Dict], model: str | None = None, output_dir: str = "outputs"):
        """
        meetings: список dict {'meeting_id': str, 'text': str, 'meeting_type': str|None}
        Порядок в списке определяет последовательность обработки (первая встреча -> первый промпт; остальные -> второй).
        Возвращает dict с путями к файлам и объектом saved_profile.
        """
        os.makedirs(output_dir, exist_ok=True)
        txt_path = os.path.join(output_dir, f"{name}_profile_steps.txt")
        docx_path = os.path.join(output_dir, f"{name}_digital_profile.docx")
        model = model or OLLAMA_MODEL_GEN

        last_result = None
        steps = []
        with open(txt_path, "w", encoding="utf-8") as ftxt:
            ftxt.write(f"Profile build for: {name}\nStarted: {datetime.utcnow().isoformat()} UTC\n\n")
            for i, meeting in enumerate(meetings):
                mid = meeting.get("meeting_id") or f"meeting_{i+1}"
                transcript = meeting.get("text", "")
                ftxt.write(f"--- STEP {i+1} ---\nMEETING_ID: {mid}\n")
                if i == 0:
                    prompt = FIRST_PROMPT.format(name=name) + "\n\nTranscript:\n" + transcript
                else:
                    prompt = SECOND_PROMPT.format(last_result=last_result, name=name) + "\n\nTranscript:\n" + transcript
                # call Ollama
                try:
                    resp = ollama_generate(prompt, model=model, max_tokens=2048)
                except Exception as e:
                    resp = f"[ERROR calling Ollama]: {e}"
                # save step
                step = {"step": i+1, "meeting_id": mid, "response": resp}
                steps.append(step)
                ftxt.write(resp + "\n\n")
                # persist intermediate as fact in KAG for provenance
                try:
                    self.kag.add_fact(meeting_id=mid, subject=name, predicate="profile_step", obj=resp, confidence=0.9, source="profile_builder", metadata={"step": i+1})
                except Exception:
                    pass
                last_result = resp

        # final docx: combine steps and final profile
        doc = Document()
        doc.add_heading(f"Цифровой профиль: {name}", level=1)
        doc.add_paragraph(f"Сгенерирован: {datetime.utcnow().isoformat()} UTC")
        doc.add_paragraph("Источник: последовательная агрегация по предоставленным встречам.")
        doc.add_paragraph("")
        for s in steps:
            doc.add_heading(f"Шаг {s['step']} — meeting: {s['meeting_id']}", level=2)
            # keep paragraphs reasonably sized
            for para in s['response'].split("\n\n"):
                doc.add_paragraph(para.strip())
        # add final consolidated section
        if last_result:
            doc.add_heading("Итоговый профиль (последняя версия)", level=1)
            for para in last_result.split("\n\n"):
                doc.add_paragraph(para.strip())
        doc.save(docx_path)

        # save final profile in KAG profiles table
        try:
            saved = self.kag.save_profile(name=name, content=last_result or "", source_meetings=[m.get("meeting_id") for m in meetings])
        except Exception:
            saved = None

        return {"txt_path": txt_path, "docx_path": docx_path, "steps": steps, "saved_profile": {"id": getattr(saved, "id", None), "version": getattr(saved, "version", None)}}
